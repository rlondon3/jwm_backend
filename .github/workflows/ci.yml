name: Node.js CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ vars.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ vars.POSTGRES_DB_TEST }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
      pgadmin:
        image: dpage/pgadmin4:latest
        ports:
          - 5050:80
        env:
          PGADMIN_DEFAULT_EMAIL: ${{ vars.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD: ${{ vars.PGADMIN_DEFAULT_PASSWORD }}

    env:
      POSTGRES_HOST: localhost
      POSTGRES_DB: ${{ vars.POSTGRES_DB }}
      POSTGRES_DB_TEST: ${{ vars.POSTGRES_DB_TEST }}
      POSTGRES_DB_PROD: POSTGRES_DB_PROD
      POSTGRES_USER: ${{ vars.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ vars.POSTGRES_PASSWORD }}
      PGADMIN_DEFAULT_EMAIL: ${{ vars.PGADMIN_DEFAULT_EMAIL }}
      PGADMIN_DEFAULT_PASSWORD: ${{ vars.PGADMIN_DEFAULT_PASSWORD }}
      DB_PORT: 5433
      TOKEN_SECRET: ${{ vars.TOKEN_SECRET }}
      SALT_ROUNDS: ${{ vars.SALT_ROUNDS }}
      SPEC_USER: ${{ vars.SPEC_USER }}
      SPEC_PASSWORD: ${{ vars.SPEC_PASSWORD }}
      PEPPER: ${{ vars.PEPPER }}
      ENV: ${{ vars.ENV }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 9.5.0

      - name: Show current directory
        run: |
          echo "Current directory is: $(pwd)"
          echo "Listing the contents:"
          ls -la

      - name: Install Backend dependencies
        run: |
          npm install -g pnpm
          pnpm install

      - name: Wait for PostgreSQL to be ready
        run: |
          timeout 30s bash -c '
          until pg_isready -h localhost -p 5433 -U ${{ vars.POSTGRES_USER }}; do
            echo "PostgreSQL is not ready yet - retrying..."
            sleep 2
          done
          '

      - name: Setup Test Database
        run: |
          PGPASSWORD=${{ vars.POSTGRES_PASSWORD }} psql -h localhost -p 5433 -U ${{ vars.POSTGRES_USER }} -d postgres -c 'SELECT version();'
          PGPASSWORD=${{ vars.POSTGRES_PASSWORD }} psql -h localhost -p 5433 -U ${{ vars.POSTGRES_USER }} -d postgres -c 'DROP DATABASE IF EXISTS ${{ vars.POSTGRES_DB_TEST }};'
          PGPASSWORD=${{ vars.POSTGRES_PASSWORD }} psql -h localhost -p 5433 -U ${{ vars.POSTGRES_USER }} -d postgres -c 'CREATE DATABASE ${{ vars.POSTGRES_DB_TEST }};'

      - name: Run Backend tests
        run: |
          pnpm test
